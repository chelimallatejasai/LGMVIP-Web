{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/chelimallatejasai/LGMVIP-Web/blob/main/NNFL%20using%20Lion%20Optimizer\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "z5Ee2g7hhPSs"
      },
      "outputs": [],
      "source": [
        "#import libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import tensorflow as tf"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset = pd.read_csv('/content/enhanced_anxiety_dataset.csv')"
      ],
      "metadata": {
        "id": "Gi60NU4rjXBa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.head()\n",
        "dataset.tail()\n",
        "dataset.info()\n",
        "dataset.describe().T\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "corr_var=dataset.corr(numeric_only=True) # added numeric_only=True\n",
        "print(corr_var)\n",
        "plt.figure(figsize=(10,7.5)) #matplotlib.pyplot is now imported as plt\n",
        "sns.heatmap(corr_var, annot=True, cmap='BuPu') #seaborn is now imported as sns\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "5HBZApnOkLto",
        "outputId": "1c31cc7c-684f-46f5-cb66-3e96df051f26"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 11000 entries, 0 to 10999\n",
            "Data columns (total 19 columns):\n",
            " #   Column                             Non-Null Count  Dtype  \n",
            "---  ------                             --------------  -----  \n",
            " 0   Age                                11000 non-null  int64  \n",
            " 1   Gender                             11000 non-null  object \n",
            " 2   Occupation                         11000 non-null  object \n",
            " 3   Sleep Hours                        11000 non-null  float64\n",
            " 4   Physical Activity (hrs/week)       11000 non-null  float64\n",
            " 5   Caffeine Intake (mg/day)           11000 non-null  int64  \n",
            " 6   Alcohol Consumption (drinks/week)  11000 non-null  int64  \n",
            " 7   Smoking                            11000 non-null  object \n",
            " 8   Family History of Anxiety          11000 non-null  object \n",
            " 9   Stress Level (1-10)                11000 non-null  int64  \n",
            " 10  Heart Rate (bpm)                   11000 non-null  int64  \n",
            " 11  Breathing Rate (breaths/min)       11000 non-null  int64  \n",
            " 12  Sweating Level (1-5)               11000 non-null  int64  \n",
            " 13  Dizziness                          11000 non-null  object \n",
            " 14  Medication                         11000 non-null  object \n",
            " 15  Therapy Sessions (per month)       11000 non-null  int64  \n",
            " 16  Recent Major Life Event            11000 non-null  object \n",
            " 17  Diet Quality (1-10)                11000 non-null  int64  \n",
            " 18  Anxiety Level (1-10)               11000 non-null  float64\n",
            "dtypes: float64(3), int64(9), object(7)\n",
            "memory usage: 1.6+ MB\n",
            "                                        Age  Sleep Hours  \\\n",
            "Age                                1.000000    -0.148349   \n",
            "Sleep Hours                       -0.148349     1.000000   \n",
            "Physical Activity (hrs/week)       0.037240     0.174526   \n",
            "Caffeine Intake (mg/day)          -0.038398    -0.208659   \n",
            "Alcohol Consumption (drinks/week) -0.015953    -0.068068   \n",
            "Stress Level (1-10)               -0.044824    -0.177315   \n",
            "Heart Rate (bpm)                  -0.032022    -0.138254   \n",
            "Breathing Rate (breaths/min)      -0.013896    -0.119872   \n",
            "Sweating Level (1-5)              -0.020483    -0.118197   \n",
            "Therapy Sessions (per month)      -0.087185    -0.309251   \n",
            "Diet Quality (1-10)                0.048677     0.154110   \n",
            "Anxiety Level (1-10)              -0.074316    -0.493836   \n",
            "\n",
            "                                   Physical Activity (hrs/week)  \\\n",
            "Age                                                    0.037240   \n",
            "Sleep Hours                                            0.174526   \n",
            "Physical Activity (hrs/week)                           1.000000   \n",
            "Caffeine Intake (mg/day)                              -0.115298   \n",
            "Alcohol Consumption (drinks/week)                     -0.032936   \n",
            "Stress Level (1-10)                                   -0.103475   \n",
            "Heart Rate (bpm)                                      -0.076846   \n",
            "Breathing Rate (breaths/min)                          -0.071195   \n",
            "Sweating Level (1-5)                                  -0.075107   \n",
            "Therapy Sessions (per month)                          -0.188324   \n",
            "Diet Quality (1-10)                                    0.085587   \n",
            "Anxiety Level (1-10)                                  -0.243187   \n",
            "\n",
            "                                   Caffeine Intake (mg/day)  \\\n",
            "Age                                               -0.038398   \n",
            "Sleep Hours                                       -0.208659   \n",
            "Physical Activity (hrs/week)                      -0.115298   \n",
            "Caffeine Intake (mg/day)                           1.000000   \n",
            "Alcohol Consumption (drinks/week)                  0.036401   \n",
            "Stress Level (1-10)                                0.121424   \n",
            "Heart Rate (bpm)                                   0.076555   \n",
            "Breathing Rate (breaths/min)                       0.080000   \n",
            "Sweating Level (1-5)                               0.076011   \n",
            "Therapy Sessions (per month)                       0.216682   \n",
            "Diet Quality (1-10)                               -0.089457   \n",
            "Anxiety Level (1-10)                               0.350651   \n",
            "\n",
            "                                   Alcohol Consumption (drinks/week)  \\\n",
            "Age                                                        -0.015953   \n",
            "Sleep Hours                                                -0.068068   \n",
            "Physical Activity (hrs/week)                               -0.032936   \n",
            "Caffeine Intake (mg/day)                                    0.036401   \n",
            "Alcohol Consumption (drinks/week)                           1.000000   \n",
            "Stress Level (1-10)                                         0.051508   \n",
            "Heart Rate (bpm)                                            0.044271   \n",
            "Breathing Rate (breaths/min)                                0.023692   \n",
            "Sweating Level (1-5)                                        0.023641   \n",
            "Therapy Sessions (per month)                                0.061931   \n",
            "Diet Quality (1-10)                                        -0.029601   \n",
            "Anxiety Level (1-10)                                        0.100626   \n",
            "\n",
            "                                   Stress Level (1-10)  Heart Rate (bpm)  \\\n",
            "Age                                          -0.044824         -0.032022   \n",
            "Sleep Hours                                  -0.177315         -0.138254   \n",
            "Physical Activity (hrs/week)                 -0.103475         -0.076846   \n",
            "Caffeine Intake (mg/day)                      0.121424          0.076555   \n",
            "Alcohol Consumption (drinks/week)             0.051508          0.044271   \n",
            "Stress Level (1-10)                           1.000000          0.088467   \n",
            "Heart Rate (bpm)                              0.088467          1.000000   \n",
            "Breathing Rate (breaths/min)                  0.062581          0.053283   \n",
            "Sweating Level (1-5)                          0.084936          0.062168   \n",
            "Therapy Sessions (per month)                  0.209096          0.154794   \n",
            "Diet Quality (1-10)                          -0.110085         -0.086214   \n",
            "Anxiety Level (1-10)                          0.667939          0.188900   \n",
            "\n",
            "                                   Breathing Rate (breaths/min)  \\\n",
            "Age                                                   -0.013896   \n",
            "Sleep Hours                                           -0.119872   \n",
            "Physical Activity (hrs/week)                          -0.071195   \n",
            "Caffeine Intake (mg/day)                               0.080000   \n",
            "Alcohol Consumption (drinks/week)                      0.023692   \n",
            "Stress Level (1-10)                                    0.062581   \n",
            "Heart Rate (bpm)                                       0.053283   \n",
            "Breathing Rate (breaths/min)                           1.000000   \n",
            "Sweating Level (1-5)                                   0.048349   \n",
            "Therapy Sessions (per month)                           0.138993   \n",
            "Diet Quality (1-10)                                   -0.054035   \n",
            "Anxiety Level (1-10)                                   0.157048   \n",
            "\n",
            "                                   Sweating Level (1-5)  \\\n",
            "Age                                           -0.020483   \n",
            "Sleep Hours                                   -0.118197   \n",
            "Physical Activity (hrs/week)                  -0.075107   \n",
            "Caffeine Intake (mg/day)                       0.076011   \n",
            "Alcohol Consumption (drinks/week)              0.023641   \n",
            "Stress Level (1-10)                            0.084936   \n",
            "Heart Rate (bpm)                               0.062168   \n",
            "Breathing Rate (breaths/min)                   0.048349   \n",
            "Sweating Level (1-5)                           1.000000   \n",
            "Therapy Sessions (per month)                   0.117670   \n",
            "Diet Quality (1-10)                           -0.077453   \n",
            "Anxiety Level (1-10)                           0.160074   \n",
            "\n",
            "                                   Therapy Sessions (per month)  \\\n",
            "Age                                                   -0.087185   \n",
            "Sleep Hours                                           -0.309251   \n",
            "Physical Activity (hrs/week)                          -0.188324   \n",
            "Caffeine Intake (mg/day)                               0.216682   \n",
            "Alcohol Consumption (drinks/week)                      0.061931   \n",
            "Stress Level (1-10)                                    0.209096   \n",
            "Heart Rate (bpm)                                       0.154794   \n",
            "Breathing Rate (breaths/min)                           0.138993   \n",
            "Sweating Level (1-5)                                   0.117670   \n",
            "Therapy Sessions (per month)                           1.000000   \n",
            "Diet Quality (1-10)                                   -0.172908   \n",
            "Anxiety Level (1-10)                                   0.517606   \n",
            "\n",
            "                                   Diet Quality (1-10)  Anxiety Level (1-10)  \n",
            "Age                                           0.048677             -0.074316  \n",
            "Sleep Hours                                   0.154110             -0.493836  \n",
            "Physical Activity (hrs/week)                  0.085587             -0.243187  \n",
            "Caffeine Intake (mg/day)                     -0.089457              0.350651  \n",
            "Alcohol Consumption (drinks/week)            -0.029601              0.100626  \n",
            "Stress Level (1-10)                          -0.110085              0.667939  \n",
            "Heart Rate (bpm)                             -0.086214              0.188900  \n",
            "Breathing Rate (breaths/min)                 -0.054035              0.157048  \n",
            "Sweating Level (1-5)                         -0.077453              0.160074  \n",
            "Therapy Sessions (per month)                 -0.172908              0.517606  \n",
            "Diet Quality (1-10)                           1.000000             -0.220245  \n",
            "Anxiety Level (1-10)                         -0.220245              1.000000  \n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x750 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "# Load dataset\n",
        "dataset = pd.read_csv('/content/enhanced_anxiety_dataset.csv')\n",
        "\n",
        "# Set target column\n",
        "target_col = 'Anxiety Level (1-10)'\n",
        "columns_to_drop = [target_col]\n",
        "\n",
        "# Features and Target\n",
        "X = dataset.drop(columns=columns_to_drop, axis=1)\n",
        "y = dataset[target_col]\n",
        "\n",
        "# Recalculate numeric columns (after dropping target)\n",
        "numeric_cols = X.select_dtypes(include=[np.number]).columns\n",
        "\n",
        "# Fill missing numeric values\n",
        "X[numeric_cols] = X[numeric_cols].fillna(X[numeric_cols].mean())\n",
        "\n",
        "# Convert target to int if it's float (optional)\n",
        "y = y.astype(int)\n",
        "\n",
        "# Encode target\n",
        "le_y = LabelEncoder()\n",
        "y = le_y.fit_transform(y)\n",
        "\n",
        "# Identify categorical columns\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns\n",
        "binary_cols = [col for col in categorical_cols if X[col].nunique() == 2]\n",
        "multi_cat_cols = [col for col in categorical_cols if X[col].nunique() > 2]\n",
        "\n",
        "# Label encode binary categorical columns\n",
        "for col in binary_cols:\n",
        "    le = LabelEncoder()\n",
        "    X[col] = le.fit_transform(X[col].astype(str))\n",
        "\n",
        "# One-hot encode multi-class categorical columns\n",
        "X = pd.get_dummies(X, columns=multi_cat_cols, drop_first=True)\n",
        "\n",
        "# Feature scaling\n",
        "scaler = StandardScaler()\n",
        "X[numeric_cols] = scaler.fit_transform(X[numeric_cols])\n",
        "\n",
        "# Train on full dataset\n",
        "clf = RandomForestClassifier(random_state=42)\n",
        "clf.fit(X, y)\n",
        "\n",
        "print(\"\\n✅ Model trained on entire dataset.\")\n",
        "print(f\"🧪 Total samples used: {X.shape[0]}\")\n",
        "print(f\"📈 Total features used: {X.shape[1]}\")\n",
        "print(f\"🎯 Target classes: {le_y.classes_}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-rWWT4hilNkd",
        "outputId": "87c5059d-3c29-473a-e1af-1ceb89d59b8c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "✅ Model trained on entire dataset.\n",
            "🧪 Total samples used: 11000\n",
            "📈 Total features used: 30\n",
            "🎯 Target classes: [ 1  2  3  4  5  6  7  8  9 10]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 💡 Step 1: Import required libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "\n",
        "# 📂 Step 2: Load dataset\n",
        "df = pd.read_csv('/content/enhanced_anxiety_dataset.csv')\n",
        "\n",
        "# 🧹 Step 3: Data Cleaning\n",
        "df.replace('?', np.nan, inplace=True)\n",
        "df.dropna(inplace=True)\n",
        "\n",
        "# ✅ Ensure target column exists\n",
        "target_col = 'Anxiety Level (1-10)'\n",
        "if target_col not in df.columns:\n",
        "    raise ValueError(f\"Target column '{target_col}' not found.\")\n",
        "\n",
        "# 🧽 Step 4: Filter valid numeric values in target column\n",
        "def is_valid_anxiety(val):\n",
        "    try:\n",
        "        val = int(val)\n",
        "        return 1 <= val <= 10\n",
        "    except:\n",
        "        return False\n",
        "\n",
        "df = df[df[target_col].apply(is_valid_anxiety)]\n",
        "df[target_col] = df[target_col].astype(int) - 1  # Convert 1–10 → 0–9\n",
        "\n",
        "# 🎯 Step 5: Define features and target\n",
        "X = df.drop(target_col, axis=1)\n",
        "y = df[target_col]\n",
        "y_cat = to_categorical(y, num_classes=10)\n",
        "\n",
        "# 🔤 Step 6: Encode categorical variables\n",
        "label_encoder = LabelEncoder()\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns.tolist()\n",
        "\n",
        "for col in categorical_cols:\n",
        "    X[col] = label_encoder.fit_transform(X[col].astype(str))\n",
        "\n",
        "# 🔢 Step 7: Normalize numerical features\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# 🧪 Step 8: Train-test split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_cat, test_size=0.2, random_state=42)\n",
        "\n",
        "# 🧠 Step 9: Build ANN model for multi-class classification\n",
        "model = Sequential([\n",
        "    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),\n",
        "    Dense(32, activation='relu'),\n",
        "    Dense(16, activation='relu'),\n",
        "    Dense(10, activation='softmax')  # 10 classes (0–9)\n",
        "])\n",
        "\n",
        "# ⚙️ Step 10: Compile model\n",
        "adam_optimizer = Adam(learning_rate=0.001)\n",
        "model.compile(optimizer=adam_optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# 🏋️ Step 11: Train model\n",
        "history = model.fit(X_train, y_train, epochs=50, batch_size=20, validation_data=(X_test, y_test), verbose=1)\n",
        "\n",
        "# 📊 Step 12: Evaluate model\n",
        "loss, accuracy = model.evaluate(X_test, y_test, verbose=0)\n",
        "print(f\"\\n✅ Test Loss: {loss:.4f}\")\n",
        "print(f\"✅ Test Accuracy: {accuracy:.4f}\")\n",
        "\n",
        "# 🔍 Step 13: Classification report\n",
        "y_pred_probs = model.predict(X_test)\n",
        "y_pred = y_pred_probs.argmax(axis=1)\n",
        "y_true = y_test.argmax(axis=1)\n",
        "\n",
        "print(\"\\n📝 Classification Report:\\n\", classification_report(y_true, y_pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XHIk6IxvA6Q4",
        "outputId": "6d45a118-5e2f-42f9-9ece-78e9ae4ae39a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.2495 - loss: 1.9168 - val_accuracy: 0.3523 - val_loss: 1.4511\n",
            "Epoch 2/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3677 - loss: 1.4224 - val_accuracy: 0.3686 - val_loss: 1.4023\n",
            "Epoch 3/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.3866 - loss: 1.3886 - val_accuracy: 0.3659 - val_loss: 1.3997\n",
            "Epoch 4/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.3875 - loss: 1.3618 - val_accuracy: 0.3582 - val_loss: 1.3952\n",
            "Epoch 5/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.3957 - loss: 1.3511 - val_accuracy: 0.3559 - val_loss: 1.4019\n",
            "Epoch 6/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.4002 - loss: 1.3613 - val_accuracy: 0.3564 - val_loss: 1.3951\n",
            "Epoch 7/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.3946 - loss: 1.3510 - val_accuracy: 0.3482 - val_loss: 1.4037\n",
            "Epoch 8/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.3945 - loss: 1.3366 - val_accuracy: 0.3600 - val_loss: 1.4056\n",
            "Epoch 9/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3907 - loss: 1.3328 - val_accuracy: 0.3577 - val_loss: 1.3981\n",
            "Epoch 10/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4109 - loss: 1.3213 - val_accuracy: 0.3545 - val_loss: 1.4035\n",
            "Epoch 11/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4090 - loss: 1.3206 - val_accuracy: 0.3505 - val_loss: 1.4068\n",
            "Epoch 12/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.4133 - loss: 1.3153 - val_accuracy: 0.3595 - val_loss: 1.4057\n",
            "Epoch 13/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.4187 - loss: 1.3084 - val_accuracy: 0.3532 - val_loss: 1.4172\n",
            "Epoch 14/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.4231 - loss: 1.3072 - val_accuracy: 0.3495 - val_loss: 1.4351\n",
            "Epoch 15/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4301 - loss: 1.3060 - val_accuracy: 0.3400 - val_loss: 1.4327\n",
            "Epoch 16/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4336 - loss: 1.2893 - val_accuracy: 0.3414 - val_loss: 1.4285\n",
            "Epoch 17/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.4385 - loss: 1.2933 - val_accuracy: 0.3477 - val_loss: 1.4281\n",
            "Epoch 18/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.4386 - loss: 1.2797 - val_accuracy: 0.3423 - val_loss: 1.4325\n",
            "Epoch 19/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - accuracy: 0.4485 - loss: 1.2669 - val_accuracy: 0.3405 - val_loss: 1.4339\n",
            "Epoch 20/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 4ms/step - accuracy: 0.4468 - loss: 1.2803 - val_accuracy: 0.3464 - val_loss: 1.4487\n",
            "Epoch 21/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - accuracy: 0.4582 - loss: 1.2607 - val_accuracy: 0.3400 - val_loss: 1.4496\n",
            "Epoch 22/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.4529 - loss: 1.2671 - val_accuracy: 0.3327 - val_loss: 1.4810\n",
            "Epoch 23/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.4540 - loss: 1.2525 - val_accuracy: 0.3500 - val_loss: 1.4612\n",
            "Epoch 24/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.4583 - loss: 1.2412 - val_accuracy: 0.3291 - val_loss: 1.4753\n",
            "Epoch 25/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4644 - loss: 1.2448 - val_accuracy: 0.3450 - val_loss: 1.4711\n",
            "Epoch 26/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4627 - loss: 1.2457 - val_accuracy: 0.3382 - val_loss: 1.4766\n",
            "Epoch 27/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4763 - loss: 1.2336 - val_accuracy: 0.3400 - val_loss: 1.4727\n",
            "Epoch 28/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4720 - loss: 1.2195 - val_accuracy: 0.3405 - val_loss: 1.4842\n",
            "Epoch 29/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4721 - loss: 1.2290 - val_accuracy: 0.3427 - val_loss: 1.4935\n",
            "Epoch 30/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4748 - loss: 1.2244 - val_accuracy: 0.3459 - val_loss: 1.4945\n",
            "Epoch 31/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4820 - loss: 1.2169 - val_accuracy: 0.3391 - val_loss: 1.5008\n",
            "Epoch 32/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.4889 - loss: 1.2092 - val_accuracy: 0.3377 - val_loss: 1.5030\n",
            "Epoch 33/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4970 - loss: 1.2089 - val_accuracy: 0.3395 - val_loss: 1.5142\n",
            "Epoch 34/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.4846 - loss: 1.2155 - val_accuracy: 0.3364 - val_loss: 1.5101\n",
            "Epoch 35/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4921 - loss: 1.1874 - val_accuracy: 0.3473 - val_loss: 1.5219\n",
            "Epoch 36/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4994 - loss: 1.1971 - val_accuracy: 0.3427 - val_loss: 1.5296\n",
            "Epoch 37/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4850 - loss: 1.1966 - val_accuracy: 0.3314 - val_loss: 1.5341\n",
            "Epoch 38/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5093 - loss: 1.1707 - val_accuracy: 0.3455 - val_loss: 1.5274\n",
            "Epoch 39/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4973 - loss: 1.1785 - val_accuracy: 0.3382 - val_loss: 1.5511\n",
            "Epoch 40/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4997 - loss: 1.1741 - val_accuracy: 0.3423 - val_loss: 1.5460\n",
            "Epoch 41/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.5020 - loss: 1.1760 - val_accuracy: 0.3377 - val_loss: 1.5523\n",
            "Epoch 42/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5112 - loss: 1.1727 - val_accuracy: 0.3373 - val_loss: 1.5668\n",
            "Epoch 43/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5132 - loss: 1.1618 - val_accuracy: 0.3259 - val_loss: 1.5829\n",
            "Epoch 44/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5185 - loss: 1.1596 - val_accuracy: 0.3218 - val_loss: 1.5772\n",
            "Epoch 45/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5176 - loss: 1.1548 - val_accuracy: 0.3264 - val_loss: 1.5676\n",
            "Epoch 46/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5163 - loss: 1.1529 - val_accuracy: 0.3264 - val_loss: 1.5856\n",
            "Epoch 47/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5229 - loss: 1.1526 - val_accuracy: 0.3395 - val_loss: 1.5902\n",
            "Epoch 48/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5206 - loss: 1.1405 - val_accuracy: 0.3409 - val_loss: 1.6000\n",
            "Epoch 49/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.5297 - loss: 1.1418 - val_accuracy: 0.3323 - val_loss: 1.5950\n",
            "Epoch 50/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.5204 - loss: 1.1521 - val_accuracy: 0.3277 - val_loss: 1.6289\n",
            "\n",
            "✅ Test Loss: 1.6289\n",
            "✅ Test Accuracy: 0.3277\n",
            "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
            "\n",
            "📝 Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.39      0.32      0.35       199\n",
            "           1       0.36      0.32      0.34       370\n",
            "           2       0.34      0.39      0.36       482\n",
            "           3       0.32      0.34      0.33       464\n",
            "           4       0.33      0.38      0.35       329\n",
            "           5       0.19      0.09      0.12       113\n",
            "           6       0.00      0.00      0.00        25\n",
            "           7       0.24      0.14      0.18        78\n",
            "           8       0.38      0.18      0.25        77\n",
            "           9       0.25      0.54      0.34        63\n",
            "\n",
            "    accuracy                           0.33      2200\n",
            "   macro avg       0.28      0.27      0.26      2200\n",
            "weighted avg       0.32      0.33      0.32      2200\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 💡 Step 1: Import required libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.optimizers import Nadam\n",
        "\n",
        "# 📂 Step 2: Load dataset\n",
        "df = pd.read_csv('/content/enhanced_anxiety_dataset.csv')\n",
        "\n",
        "# 🧹 Step 3: Data Cleaning\n",
        "df.replace('?', np.nan, inplace=True)\n",
        "df.dropna(inplace=True)\n",
        "\n",
        "# ✅ Ensure target column exists\n",
        "target_col = 'Anxiety Level (1-10)'\n",
        "if target_col not in df.columns:\n",
        "    raise ValueError(f\"Target column '{target_col}' not found.\")\n",
        "\n",
        "# 🧽 Step 4: Filter valid numeric values in target column\n",
        "def is_valid_anxiety(val):\n",
        "    try:\n",
        "        val = int(val)\n",
        "        return 1 <= val <= 10\n",
        "    except:\n",
        "        return False\n",
        "\n",
        "df = df[df[target_col].apply(is_valid_anxiety)]\n",
        "df[target_col] = df[target_col].astype(int) - 1  # Convert 1–10 → 0–9\n",
        "\n",
        "# 🎯 Step 5: Define features and target\n",
        "X = df.drop(target_col, axis=1)\n",
        "y = df[target_col]\n",
        "y_cat = to_categorical(y, num_classes=10)\n",
        "\n",
        "# 🔤 Step 6: Encode categorical variables\n",
        "label_encoder = LabelEncoder()\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns.tolist()\n",
        "\n",
        "for col in categorical_cols:\n",
        "    X[col] = label_encoder.fit_transform(X[col].astype(str))\n",
        "\n",
        "# 🔢 Step 7: Normalize numerical features\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# 🧪 Step 8: Train-test split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_cat, test_size=0.2, random_state=42)\n",
        "\n",
        "# 🧠 Step 9: Build ANN model for multi-class classification\n",
        "model = Sequential([\n",
        "    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),\n",
        "    Dense(32, activation='relu'),\n",
        "    Dense(16, activation='relu'),\n",
        "    Dense(10, activation='softmax')  # 10 classes (0–9)\n",
        "])\n",
        "\n",
        "# ⚙️ Step 10: Compile model\n",
        "Nadam_optimizer = Nadam(learning_rate=0.001)\n",
        "model.compile(optimizer=Nadam_optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# 🏋️ Step 11: Train model\n",
        "history = model.fit(X_train, y_train, epochs=50, batch_size=20, validation_data=(X_test, y_test), verbose=1)\n",
        "\n",
        "# 📊 Step 12: Evaluate model\n",
        "loss, accuracy = model.evaluate(X_test, y_test, verbose=0)\n",
        "print(f\"\\n✅ Test Loss: {loss:.4f}\")\n",
        "print(f\"✅ Test Accuracy: {accuracy:.4f}\")\n",
        "\n",
        "# 🔍 Step 13: Classification report\n",
        "y_pred_probs = model.predict(X_test)\n",
        "y_pred = y_pred_probs.argmax(axis=1)\n",
        "y_true = y_test.argmax(axis=1)\n",
        "\n",
        "print(\"\\n📝 Classification Report:\\n\", classification_report(y_true, y_pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HeQDCdx2DoCy",
        "outputId": "175fbcc2-173f-4e6b-842a-5bbb4975a0fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.2079 - loss: 2.0611 - val_accuracy: 0.3418 - val_loss: 1.4415\n",
            "Epoch 2/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.3514 - loss: 1.4246 - val_accuracy: 0.3700 - val_loss: 1.4071\n",
            "Epoch 3/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.3668 - loss: 1.3902 - val_accuracy: 0.3568 - val_loss: 1.4097\n",
            "Epoch 4/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.3747 - loss: 1.3831 - val_accuracy: 0.3464 - val_loss: 1.4098\n",
            "Epoch 5/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.3748 - loss: 1.3653 - val_accuracy: 0.3582 - val_loss: 1.4036\n",
            "Epoch 6/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3908 - loss: 1.3511 - val_accuracy: 0.3564 - val_loss: 1.4092\n",
            "Epoch 7/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.3925 - loss: 1.3485 - val_accuracy: 0.3441 - val_loss: 1.4138\n",
            "Epoch 8/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.4015 - loss: 1.3467 - val_accuracy: 0.3509 - val_loss: 1.4092\n",
            "Epoch 9/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.3952 - loss: 1.3420 - val_accuracy: 0.3550 - val_loss: 1.4110\n",
            "Epoch 10/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4153 - loss: 1.3310 - val_accuracy: 0.3450 - val_loss: 1.4209\n",
            "Epoch 11/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4099 - loss: 1.3285 - val_accuracy: 0.3445 - val_loss: 1.4305\n",
            "Epoch 12/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4126 - loss: 1.3139 - val_accuracy: 0.3377 - val_loss: 1.4270\n",
            "Epoch 13/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4171 - loss: 1.3271 - val_accuracy: 0.3427 - val_loss: 1.4414\n",
            "Epoch 14/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4144 - loss: 1.3236 - val_accuracy: 0.3323 - val_loss: 1.4319\n",
            "Epoch 15/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4361 - loss: 1.2981 - val_accuracy: 0.3277 - val_loss: 1.4406\n",
            "Epoch 16/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.4408 - loss: 1.2833 - val_accuracy: 0.3377 - val_loss: 1.4370\n",
            "Epoch 17/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.4409 - loss: 1.2937 - val_accuracy: 0.3455 - val_loss: 1.4451\n",
            "Epoch 18/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4425 - loss: 1.2791 - val_accuracy: 0.3309 - val_loss: 1.4482\n",
            "Epoch 19/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4484 - loss: 1.2697 - val_accuracy: 0.3341 - val_loss: 1.4614\n",
            "Epoch 20/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4363 - loss: 1.2752 - val_accuracy: 0.3214 - val_loss: 1.4677\n",
            "Epoch 21/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4516 - loss: 1.2726 - val_accuracy: 0.3364 - val_loss: 1.4695\n",
            "Epoch 22/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4491 - loss: 1.2631 - val_accuracy: 0.3209 - val_loss: 1.4715\n",
            "Epoch 23/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4496 - loss: 1.2523 - val_accuracy: 0.3227 - val_loss: 1.4723\n",
            "Epoch 24/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4640 - loss: 1.2477 - val_accuracy: 0.3255 - val_loss: 1.4853\n",
            "Epoch 25/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.4584 - loss: 1.2487 - val_accuracy: 0.3164 - val_loss: 1.4885\n",
            "Epoch 26/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - accuracy: 0.4620 - loss: 1.2368 - val_accuracy: 0.3264 - val_loss: 1.4914\n",
            "Epoch 27/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4622 - loss: 1.2488 - val_accuracy: 0.3259 - val_loss: 1.5059\n",
            "Epoch 28/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4607 - loss: 1.2422 - val_accuracy: 0.3077 - val_loss: 1.5107\n",
            "Epoch 29/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4686 - loss: 1.2395 - val_accuracy: 0.3164 - val_loss: 1.5029\n",
            "Epoch 30/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4721 - loss: 1.2333 - val_accuracy: 0.3091 - val_loss: 1.5086\n",
            "Epoch 31/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4790 - loss: 1.2254 - val_accuracy: 0.3273 - val_loss: 1.5093\n",
            "Epoch 32/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4782 - loss: 1.2104 - val_accuracy: 0.3118 - val_loss: 1.5343\n",
            "Epoch 33/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4778 - loss: 1.2193 - val_accuracy: 0.3291 - val_loss: 1.5393\n",
            "Epoch 34/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.4758 - loss: 1.2098 - val_accuracy: 0.3268 - val_loss: 1.5356\n",
            "Epoch 35/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.4931 - loss: 1.1968 - val_accuracy: 0.3286 - val_loss: 1.5370\n",
            "Epoch 36/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4957 - loss: 1.1935 - val_accuracy: 0.3155 - val_loss: 1.5456\n",
            "Epoch 37/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5052 - loss: 1.1830 - val_accuracy: 0.3164 - val_loss: 1.5614\n",
            "Epoch 38/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4938 - loss: 1.1953 - val_accuracy: 0.3109 - val_loss: 1.5532\n",
            "Epoch 39/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5031 - loss: 1.1849 - val_accuracy: 0.3132 - val_loss: 1.5527\n",
            "Epoch 40/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5062 - loss: 1.1792 - val_accuracy: 0.3273 - val_loss: 1.5612\n",
            "Epoch 41/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5130 - loss: 1.1625 - val_accuracy: 0.3100 - val_loss: 1.5660\n",
            "Epoch 42/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5050 - loss: 1.1726 - val_accuracy: 0.3136 - val_loss: 1.5824\n",
            "Epoch 43/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.4948 - loss: 1.1862 - val_accuracy: 0.3200 - val_loss: 1.5773\n",
            "Epoch 44/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5062 - loss: 1.1660 - val_accuracy: 0.3177 - val_loss: 1.5778\n",
            "Epoch 45/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.5097 - loss: 1.1654 - val_accuracy: 0.3091 - val_loss: 1.5940\n",
            "Epoch 46/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5068 - loss: 1.1640 - val_accuracy: 0.3218 - val_loss: 1.6022\n",
            "Epoch 47/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5154 - loss: 1.1654 - val_accuracy: 0.3245 - val_loss: 1.5915\n",
            "Epoch 48/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5116 - loss: 1.1487 - val_accuracy: 0.3123 - val_loss: 1.6186\n",
            "Epoch 49/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5065 - loss: 1.1658 - val_accuracy: 0.3186 - val_loss: 1.6236\n",
            "Epoch 50/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5070 - loss: 1.1512 - val_accuracy: 0.3155 - val_loss: 1.6265\n",
            "\n",
            "✅ Test Loss: 1.6265\n",
            "✅ Test Accuracy: 0.3155\n",
            "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
            "\n",
            "📝 Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.40      0.42      0.41       199\n",
            "           1       0.30      0.16      0.21       370\n",
            "           2       0.30      0.46      0.37       482\n",
            "           3       0.30      0.28      0.29       464\n",
            "           4       0.34      0.34      0.34       329\n",
            "           5       0.26      0.13      0.18       113\n",
            "           6       0.08      0.04      0.05        25\n",
            "           7       0.33      0.71      0.45        78\n",
            "           8       0.45      0.13      0.20        77\n",
            "           9       0.19      0.10      0.13        63\n",
            "\n",
            "    accuracy                           0.32      2200\n",
            "   macro avg       0.30      0.28      0.26      2200\n",
            "weighted avg       0.31      0.32      0.30      2200\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 💡 Step 1: Import required libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.optimizers import AdamW\n",
        "\n",
        "# 📂 Step 2: Load dataset\n",
        "df = pd.read_csv('/content/enhanced_anxiety_dataset.csv')\n",
        "\n",
        "# 🧹 Step 3: Data Cleaning\n",
        "df.replace('?', np.nan, inplace=True)\n",
        "df.dropna(inplace=True)\n",
        "\n",
        "# ✅ Ensure target column exists\n",
        "target_col = 'Anxiety Level (1-10)'\n",
        "if target_col not in df.columns:\n",
        "    raise ValueError(f\"Target column '{target_col}' not found.\")\n",
        "\n",
        "# 🧽 Step 4: Filter valid numeric values in target column\n",
        "def is_valid_anxiety(val):\n",
        "    try:\n",
        "        val = int(val)\n",
        "        return 1 <= val <= 10\n",
        "    except:\n",
        "        return False\n",
        "\n",
        "df = df[df[target_col].apply(is_valid_anxiety)]\n",
        "df[target_col] = df[target_col].astype(int) - 1  # Convert 1–10 → 0–9\n",
        "\n",
        "# 🎯 Step 5: Define features and target\n",
        "X = df.drop(target_col, axis=1)\n",
        "y = df[target_col]\n",
        "y_cat = to_categorical(y, num_classes=10)\n",
        "\n",
        "# 🔤 Step 6: Encode categorical variables\n",
        "label_encoder = LabelEncoder()\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns.tolist()\n",
        "\n",
        "for col in categorical_cols:\n",
        "    X[col] = label_encoder.fit_transform(X[col].astype(str))\n",
        "\n",
        "# 🔢 Step 7: Normalize numerical features\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# 🧪 Step 8: Train-test split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_cat, test_size=0.2, random_state=42)\n",
        "\n",
        "# 🧠 Step 9: Build ANN model for multi-class classification\n",
        "model = Sequential([\n",
        "    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),\n",
        "    Dense(32, activation='relu'),\n",
        "    Dense(16, activation='relu'),\n",
        "    Dense(10, activation='softmax')  # 10 classes (0–9)\n",
        "])\n",
        "\n",
        "# ⚙️ Step 10: Compile model\n",
        "adamW_optimizer = AdamW(learning_rate=0.001)\n",
        "model.compile(optimizer=adamW_optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# 🏋️ Step 11: Train model\n",
        "history = model.fit(X_train, y_train, epochs=50, batch_size=20, validation_data=(X_test, y_test), verbose=1)\n",
        "\n",
        "# 📊 Step 12: Evaluate model\n",
        "loss, accuracy = model.evaluate(X_test, y_test, verbose=0)\n",
        "print(f\"\\n✅ Test Loss: {loss:.4f}\")\n",
        "print(f\"✅ Test Accuracy: {accuracy:.4f}\")\n",
        "\n",
        "# 🔍 Step 13: Classification report\n",
        "y_pred_probs = model.predict(X_test)\n",
        "y_pred = y_pred_probs.argmax(axis=1)\n",
        "y_true = y_test.argmax(axis=1)\n",
        "\n",
        "print(\"\\n📝 Classification Report:\\n\", classification_report(y_true, y_pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P4JO5iZfE88a",
        "outputId": "5e950661-64bb-4b62-b0b8-c93d7bf141a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.2023 - loss: 2.0277 - val_accuracy: 0.3509 - val_loss: 1.4688\n",
            "Epoch 2/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - accuracy: 0.3621 - loss: 1.4331 - val_accuracy: 0.3586 - val_loss: 1.4044\n",
            "Epoch 3/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3683 - loss: 1.3918 - val_accuracy: 0.3591 - val_loss: 1.3915\n",
            "Epoch 4/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3851 - loss: 1.3623 - val_accuracy: 0.3573 - val_loss: 1.3931\n",
            "Epoch 5/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.3886 - loss: 1.3769 - val_accuracy: 0.3600 - val_loss: 1.3890\n",
            "Epoch 6/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.3960 - loss: 1.3569 - val_accuracy: 0.3600 - val_loss: 1.3956\n",
            "Epoch 7/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.3835 - loss: 1.3599 - val_accuracy: 0.3536 - val_loss: 1.3987\n",
            "Epoch 8/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.3905 - loss: 1.3337 - val_accuracy: 0.3468 - val_loss: 1.3979\n",
            "Epoch 9/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - accuracy: 0.3920 - loss: 1.3468 - val_accuracy: 0.3682 - val_loss: 1.3932\n",
            "Epoch 10/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4033 - loss: 1.3449 - val_accuracy: 0.3514 - val_loss: 1.3955\n",
            "Epoch 11/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4104 - loss: 1.3268 - val_accuracy: 0.3427 - val_loss: 1.4213\n",
            "Epoch 12/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4151 - loss: 1.3293 - val_accuracy: 0.3541 - val_loss: 1.3989\n",
            "Epoch 13/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4018 - loss: 1.3325 - val_accuracy: 0.3355 - val_loss: 1.4156\n",
            "Epoch 14/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4090 - loss: 1.3266 - val_accuracy: 0.3518 - val_loss: 1.4186\n",
            "Epoch 15/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4193 - loss: 1.3089 - val_accuracy: 0.3332 - val_loss: 1.4254\n",
            "Epoch 16/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4126 - loss: 1.3047 - val_accuracy: 0.3536 - val_loss: 1.4172\n",
            "Epoch 17/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.4260 - loss: 1.2875 - val_accuracy: 0.3245 - val_loss: 1.4274\n",
            "Epoch 18/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.4241 - loss: 1.2940 - val_accuracy: 0.3300 - val_loss: 1.4303\n",
            "Epoch 19/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4284 - loss: 1.3035 - val_accuracy: 0.3418 - val_loss: 1.4363\n",
            "Epoch 20/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4311 - loss: 1.2919 - val_accuracy: 0.3514 - val_loss: 1.4356\n",
            "Epoch 21/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4272 - loss: 1.2966 - val_accuracy: 0.3277 - val_loss: 1.4496\n",
            "Epoch 22/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4272 - loss: 1.2897 - val_accuracy: 0.3500 - val_loss: 1.4515\n",
            "Epoch 23/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4332 - loss: 1.2890 - val_accuracy: 0.3464 - val_loss: 1.4480\n",
            "Epoch 24/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4406 - loss: 1.2679 - val_accuracy: 0.3464 - val_loss: 1.4528\n",
            "Epoch 25/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4389 - loss: 1.2683 - val_accuracy: 0.3445 - val_loss: 1.4660\n",
            "Epoch 26/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.4477 - loss: 1.2660 - val_accuracy: 0.3345 - val_loss: 1.4742\n",
            "Epoch 27/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - accuracy: 0.4403 - loss: 1.2614 - val_accuracy: 0.3486 - val_loss: 1.4651\n",
            "Epoch 28/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4530 - loss: 1.2568 - val_accuracy: 0.3400 - val_loss: 1.4754\n",
            "Epoch 29/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4631 - loss: 1.2500 - val_accuracy: 0.3318 - val_loss: 1.4735\n",
            "Epoch 30/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4525 - loss: 1.2489 - val_accuracy: 0.3418 - val_loss: 1.4778\n",
            "Epoch 31/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4607 - loss: 1.2465 - val_accuracy: 0.3277 - val_loss: 1.4872\n",
            "Epoch 32/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4590 - loss: 1.2443 - val_accuracy: 0.3195 - val_loss: 1.5079\n",
            "Epoch 33/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4737 - loss: 1.2295 - val_accuracy: 0.3291 - val_loss: 1.4956\n",
            "Epoch 34/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4748 - loss: 1.2331 - val_accuracy: 0.3350 - val_loss: 1.4987\n",
            "Epoch 35/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.4765 - loss: 1.2140 - val_accuracy: 0.3250 - val_loss: 1.5152\n",
            "Epoch 36/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - accuracy: 0.4653 - loss: 1.2261 - val_accuracy: 0.3232 - val_loss: 1.5040\n",
            "Epoch 37/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4776 - loss: 1.2127 - val_accuracy: 0.3232 - val_loss: 1.5089\n",
            "Epoch 38/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4769 - loss: 1.2117 - val_accuracy: 0.3268 - val_loss: 1.5131\n",
            "Epoch 39/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4775 - loss: 1.2055 - val_accuracy: 0.3136 - val_loss: 1.5218\n",
            "Epoch 40/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4730 - loss: 1.2061 - val_accuracy: 0.3218 - val_loss: 1.5288\n",
            "Epoch 41/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4774 - loss: 1.2109 - val_accuracy: 0.3268 - val_loss: 1.5332\n",
            "Epoch 42/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4723 - loss: 1.2017 - val_accuracy: 0.3232 - val_loss: 1.5433\n",
            "Epoch 43/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4905 - loss: 1.1960 - val_accuracy: 0.3132 - val_loss: 1.5432\n",
            "Epoch 44/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.4910 - loss: 1.1855 - val_accuracy: 0.3241 - val_loss: 1.5390\n",
            "Epoch 45/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - accuracy: 0.4993 - loss: 1.1803 - val_accuracy: 0.3218 - val_loss: 1.5623\n",
            "Epoch 46/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4986 - loss: 1.1790 - val_accuracy: 0.3241 - val_loss: 1.5488\n",
            "Epoch 47/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4936 - loss: 1.1899 - val_accuracy: 0.3250 - val_loss: 1.5636\n",
            "Epoch 48/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.4947 - loss: 1.1788 - val_accuracy: 0.3173 - val_loss: 1.5696\n",
            "Epoch 49/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5067 - loss: 1.1616 - val_accuracy: 0.3032 - val_loss: 1.5812\n",
            "Epoch 50/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5043 - loss: 1.1703 - val_accuracy: 0.3305 - val_loss: 1.5785\n",
            "\n",
            "✅ Test Loss: 1.5785\n",
            "✅ Test Accuracy: 0.3305\n",
            "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
            "\n",
            "📝 Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.36      0.28      0.32       199\n",
            "           1       0.35      0.39      0.37       370\n",
            "           2       0.33      0.30      0.32       482\n",
            "           3       0.32      0.41      0.36       464\n",
            "           4       0.34      0.33      0.33       329\n",
            "           5       0.21      0.11      0.14       113\n",
            "           6       0.00      0.00      0.00        25\n",
            "           7       0.28      0.38      0.33        78\n",
            "           8       0.38      0.39      0.39        77\n",
            "           9       0.31      0.17      0.22        63\n",
            "\n",
            "    accuracy                           0.33      2200\n",
            "   macro avg       0.29      0.28      0.28      2200\n",
            "weighted avg       0.32      0.33      0.32      2200\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 💡 Step 1: Import required libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, BatchNormalization, Dropout\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.optimizers import Ftrl\n",
        "\n",
        "# 📂 Step 2: Load dataset\n",
        "df = pd.read_csv('/content/enhanced_anxiety_dataset.csv')\n",
        "\n",
        "# 🧹 Step 3: Data Cleaning\n",
        "df.replace('?', np.nan, inplace=True)\n",
        "df.dropna(inplace=True)\n",
        "\n",
        "# ✅ Ensure target column exists\n",
        "target_col = 'Anxiety Level (1-10)'\n",
        "if target_col not in df.columns:\n",
        "    raise ValueError(f\"Target column '{target_col}' not found.\")\n",
        "\n",
        "# 🧽 Step 4: Filter valid numeric values in target column\n",
        "def is_valid_anxiety(val):\n",
        "    try:\n",
        "        val = int(val)\n",
        "        return 1 <= val <= 10\n",
        "    except:\n",
        "        return False\n",
        "\n",
        "df = df[df[target_col].apply(is_valid_anxiety)]\n",
        "df[target_col] = df[target_col].astype(int) - 1  # Convert 1–10 → 0–9\n",
        "\n",
        "# 🎯 Step 5: Define features and target\n",
        "X = df.drop(target_col, axis=1)\n",
        "y = df[target_col]\n",
        "y_cat = to_categorical(y, num_classes=10)\n",
        "\n",
        "# 🔤 Step 6: Encode categorical variables\n",
        "label_encoder = LabelEncoder()\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns.tolist()\n",
        "\n",
        "for col in categorical_cols:\n",
        "    X[col] = label_encoder.fit_transform(X[col].astype(str))\n",
        "\n",
        "# 🔢 Step 7: Normalize numerical features\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# 🧪 Step 8: Train-test split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_cat, test_size=0.2, random_state=42)\n",
        "\n",
        "# 🧠 Step 9: Build ANN model with Batch Normalization\n",
        "model = Sequential([\n",
        "    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),\n",
        "    BatchNormalization(),\n",
        "    Dropout(0.3),\n",
        "\n",
        "    Dense(32, activation='relu'),\n",
        "    BatchNormalization(),\n",
        "    Dropout(0.3),\n",
        "\n",
        "    Dense(16, activation='relu'),\n",
        "    BatchNormalization(),\n",
        "\n",
        "    Dense(10, activation='softmax')  # 10 classes\n",
        "])\n",
        "\n",
        "# ⚙️ Step 10: Compile model\n",
        "Ftrl_optimizer = Ftrl(learning_rate=0.001)\n",
        "model.compile(optimizer=Ftrl_optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# 🏋️ Step 11: Train model\n",
        "history = model.fit(X_train, y_train, epochs=50, batch_size=20, validation_data=(X_test, y_test), verbose=1)\n",
        "\n",
        "# 📊 Step 12: Evaluate model\n",
        "loss, accuracy = model.evaluate(X_test, y_test, verbose=0)\n",
        "print(f\"\\n✅ Test Loss: {loss:.4f}\")\n",
        "print(f\"✅ Test Accuracy: {accuracy:.4f}\")\n",
        "\n",
        "# 🔍 Step 13: Classification report\n",
        "y_pred_probs = model.predict(X_test)\n",
        "y_pred = y_pred_probs.argmax(axis=1)\n",
        "y_true = y_test.argmax(axis=1)\n",
        "\n",
        "print(\"\\n📝 Classification Report:\\n\", classification_report(y_true, y_pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qy2I8VLCHb-2",
        "outputId": "29eb18d7-17dc-4c68-fa9d-4c42b9d22cdc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.2191 - loss: 2.2998 - val_accuracy: 0.2191 - val_loss: 2.2835\n",
            "Epoch 2/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.2188 - loss: 2.2809 - val_accuracy: 0.2191 - val_loss: 2.2747\n",
            "Epoch 3/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.2226 - loss: 2.2722 - val_accuracy: 0.2191 - val_loss: 2.2679\n",
            "Epoch 4/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.2156 - loss: 2.2664 - val_accuracy: 0.2191 - val_loss: 2.2621\n",
            "Epoch 5/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.2114 - loss: 2.2605 - val_accuracy: 0.2191 - val_loss: 2.2568\n",
            "Epoch 6/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.2240 - loss: 2.2546 - val_accuracy: 0.2191 - val_loss: 2.2517\n",
            "Epoch 7/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.2232 - loss: 2.2491 - val_accuracy: 0.2191 - val_loss: 2.2465\n",
            "Epoch 8/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.2213 - loss: 2.2446 - val_accuracy: 0.2191 - val_loss: 2.2410\n",
            "Epoch 9/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.2117 - loss: 2.2393 - val_accuracy: 0.2191 - val_loss: 2.2350\n",
            "Epoch 10/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.2155 - loss: 2.2324 - val_accuracy: 0.2191 - val_loss: 2.2285\n",
            "Epoch 11/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.2156 - loss: 2.2262 - val_accuracy: 0.2191 - val_loss: 2.2212\n",
            "Epoch 12/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - accuracy: 0.2106 - loss: 2.2194 - val_accuracy: 0.2191 - val_loss: 2.2133\n",
            "Epoch 13/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.2180 - loss: 2.2105 - val_accuracy: 0.2191 - val_loss: 2.2047\n",
            "Epoch 14/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.2122 - loss: 2.2012 - val_accuracy: 0.2191 - val_loss: 2.1955\n",
            "Epoch 15/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.2114 - loss: 2.1906 - val_accuracy: 0.2191 - val_loss: 2.1859\n",
            "Epoch 16/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.2235 - loss: 2.1818 - val_accuracy: 0.2191 - val_loss: 2.1761\n",
            "Epoch 17/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - accuracy: 0.2145 - loss: 2.1731 - val_accuracy: 0.2191 - val_loss: 2.1661\n",
            "Epoch 18/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.2157 - loss: 2.1614 - val_accuracy: 0.2191 - val_loss: 2.1562\n",
            "Epoch 19/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.2168 - loss: 2.1517 - val_accuracy: 0.2191 - val_loss: 2.1464\n",
            "Epoch 20/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.2216 - loss: 2.1419 - val_accuracy: 0.2191 - val_loss: 2.1368\n",
            "Epoch 21/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.2155 - loss: 2.1299 - val_accuracy: 0.2191 - val_loss: 2.1277\n",
            "Epoch 22/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.2157 - loss: 2.1249 - val_accuracy: 0.2191 - val_loss: 2.1189\n",
            "Epoch 23/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.2231 - loss: 2.1109 - val_accuracy: 0.2191 - val_loss: 2.1105\n",
            "Epoch 24/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.2166 - loss: 2.1065 - val_accuracy: 0.2191 - val_loss: 2.1026\n",
            "Epoch 25/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.2204 - loss: 2.0966 - val_accuracy: 0.2191 - val_loss: 2.0952\n",
            "Epoch 26/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.2155 - loss: 2.0912 - val_accuracy: 0.2191 - val_loss: 2.0883\n",
            "Epoch 27/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.2185 - loss: 2.0778 - val_accuracy: 0.2191 - val_loss: 2.0818\n",
            "Epoch 28/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.2157 - loss: 2.0776 - val_accuracy: 0.2191 - val_loss: 2.0758\n",
            "Epoch 29/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.2260 - loss: 2.0723 - val_accuracy: 0.2191 - val_loss: 2.0703\n",
            "Epoch 30/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.2185 - loss: 2.0630 - val_accuracy: 0.2191 - val_loss: 2.0652\n",
            "Epoch 31/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.2155 - loss: 2.0629 - val_accuracy: 0.2191 - val_loss: 2.0605\n",
            "Epoch 32/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.2179 - loss: 2.0580 - val_accuracy: 0.2191 - val_loss: 2.0561\n",
            "Epoch 33/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.2130 - loss: 2.0522 - val_accuracy: 0.2191 - val_loss: 2.0522\n",
            "Epoch 34/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.2195 - loss: 2.0443 - val_accuracy: 0.2191 - val_loss: 2.0485\n",
            "Epoch 35/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.2157 - loss: 2.0423 - val_accuracy: 0.2191 - val_loss: 2.0452\n",
            "Epoch 36/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.2141 - loss: 2.0338 - val_accuracy: 0.2191 - val_loss: 2.0421\n",
            "Epoch 37/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.2264 - loss: 2.0309 - val_accuracy: 0.2191 - val_loss: 2.0393\n",
            "Epoch 38/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.2165 - loss: 2.0312 - val_accuracy: 0.2191 - val_loss: 2.0368\n",
            "Epoch 39/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.2268 - loss: 2.0302 - val_accuracy: 0.2191 - val_loss: 2.0344\n",
            "Epoch 40/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.2169 - loss: 2.0284 - val_accuracy: 0.2191 - val_loss: 2.0323\n",
            "Epoch 41/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.2202 - loss: 2.0206 - val_accuracy: 0.2191 - val_loss: 2.0303\n",
            "Epoch 42/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.2208 - loss: 2.0169 - val_accuracy: 0.2191 - val_loss: 2.0285\n",
            "Epoch 43/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.2126 - loss: 2.0156 - val_accuracy: 0.2191 - val_loss: 2.0269\n",
            "Epoch 44/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.2225 - loss: 2.0144 - val_accuracy: 0.2191 - val_loss: 2.0254\n",
            "Epoch 45/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.2241 - loss: 2.0143 - val_accuracy: 0.2109 - val_loss: 2.0240\n",
            "Epoch 46/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.2149 - loss: 2.0185 - val_accuracy: 0.2109 - val_loss: 2.0227\n",
            "Epoch 47/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.2138 - loss: 2.0215 - val_accuracy: 0.2109 - val_loss: 2.0216\n",
            "Epoch 48/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.2285 - loss: 2.0124 - val_accuracy: 0.2109 - val_loss: 2.0205\n",
            "Epoch 49/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.2228 - loss: 2.0188 - val_accuracy: 0.2109 - val_loss: 2.0195\n",
            "Epoch 50/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.2226 - loss: 2.0115 - val_accuracy: 0.2109 - val_loss: 2.0186\n",
            "\n",
            "✅ Test Loss: 2.0186\n",
            "✅ Test Accuracy: 0.2109\n",
            "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\n",
            "\n",
            "📝 Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.00      0.00      0.00       199\n",
            "           1       0.00      0.00      0.00       370\n",
            "           2       0.00      0.00      0.00       482\n",
            "           3       0.21      1.00      0.35       464\n",
            "           4       0.00      0.00      0.00       329\n",
            "           5       0.00      0.00      0.00       113\n",
            "           6       0.00      0.00      0.00        25\n",
            "           7       0.00      0.00      0.00        78\n",
            "           8       0.00      0.00      0.00        77\n",
            "           9       0.00      0.00      0.00        63\n",
            "\n",
            "    accuracy                           0.21      2200\n",
            "   macro avg       0.02      0.10      0.03      2200\n",
            "weighted avg       0.04      0.21      0.07      2200\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 💡 Step 1: Import required libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, BatchNormalization, Dropout\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.optimizers import RMSprop\n",
        "\n",
        "# 📂 Step 2: Load dataset\n",
        "df = pd.read_csv('/content/enhanced_anxiety_dataset.csv')\n",
        "\n",
        "# 🧹 Step 3: Data Cleaning\n",
        "df.replace('?', np.nan, inplace=True)\n",
        "df.dropna(inplace=True)\n",
        "\n",
        "# ✅ Ensure target column exists\n",
        "target_col = 'Anxiety Level (1-10)'\n",
        "if target_col not in df.columns:\n",
        "    raise ValueError(f\"Target column '{target_col}' not found.\")\n",
        "\n",
        "# 🧽 Step 4: Filter valid numeric values in target column\n",
        "def is_valid_anxiety(val):\n",
        "    try:\n",
        "        val = int(val)\n",
        "        return 1 <= val <= 10\n",
        "    except:\n",
        "        return False\n",
        "\n",
        "df = df[df[target_col].apply(is_valid_anxiety)]\n",
        "df[target_col] = df[target_col].astype(int) - 1  # Convert 1–10 → 0–9\n",
        "\n",
        "# 🎯 Step 5: Define features and target\n",
        "X = df.drop(target_col, axis=1)\n",
        "y = df[target_col]\n",
        "y_cat = to_categorical(y, num_classes=10)\n",
        "\n",
        "# 🔤 Step 6: Encode categorical variables\n",
        "label_encoder = LabelEncoder()\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns.tolist()\n",
        "\n",
        "for col in categorical_cols:\n",
        "    X[col] = label_encoder.fit_transform(X[col].astype(str))\n",
        "\n",
        "# 🔢 Step 7: Normalize numerical features\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# 🧪 Step 8: Train-test split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_cat, test_size=0.2, random_state=42)\n",
        "\n",
        "# 🧠 Step 9: Build ANN model with Batch Normalization\n",
        "model = Sequential([\n",
        "    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),\n",
        "    BatchNormalization(),\n",
        "    Dropout(0.3),\n",
        "\n",
        "    Dense(32, activation='relu'),\n",
        "    BatchNormalization(),\n",
        "    Dropout(0.3),\n",
        "\n",
        "    Dense(16, activation='relu'),\n",
        "    BatchNormalization(),\n",
        "\n",
        "    Dense(10, activation='softmax')  # 10 classes\n",
        "])\n",
        "\n",
        "# ⚙️ Step 10: Compile model\n",
        "Ftrl_optimizer = RMSprop(learning_rate=0.001)\n",
        "model.compile(optimizer=Ftrl_optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# 🏋️ Step 11: Train model\n",
        "history = model.fit(X_train, y_train, epochs=50, batch_size=20, validation_data=(X_test, y_test), verbose=1)\n",
        "\n",
        "# 📊 Step 12: Evaluate model\n",
        "loss, accuracy = model.evaluate(X_test, y_test, verbose=0)\n",
        "print(f\"\\n✅ Test Loss: {loss:.4f}\")\n",
        "print(f\"✅ Test Accuracy: {accuracy:.4f}\")\n",
        "\n",
        "# 🔍 Step 13: Classification report\n",
        "y_pred_probs = model.predict(X_test)\n",
        "y_pred = y_pred_probs.argmax(axis=1)\n",
        "y_true = y_test.argmax(axis=1)\n",
        "\n",
        "print(\"\\n📝 Classification Report:\\n\", classification_report(y_true, y_pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZJ4VxvEeysHY",
        "outputId": "69a40474-708f-47ee-ef37-092eb69b9586"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 4ms/step - accuracy: 0.1892 - loss: 2.3198 - val_accuracy: 0.3123 - val_loss: 1.5844\n",
            "Epoch 2/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.3109 - loss: 1.6654 - val_accuracy: 0.3382 - val_loss: 1.4486\n",
            "Epoch 3/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3189 - loss: 1.5512 - val_accuracy: 0.3505 - val_loss: 1.4184\n",
            "Epoch 4/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3349 - loss: 1.5216 - val_accuracy: 0.3605 - val_loss: 1.4035\n",
            "Epoch 5/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.3541 - loss: 1.4950 - val_accuracy: 0.3627 - val_loss: 1.3981\n",
            "Epoch 6/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - accuracy: 0.3553 - loss: 1.4799 - val_accuracy: 0.3632 - val_loss: 1.3963\n",
            "Epoch 7/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.3456 - loss: 1.4738 - val_accuracy: 0.3764 - val_loss: 1.3916\n",
            "Epoch 8/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.3463 - loss: 1.4726 - val_accuracy: 0.3750 - val_loss: 1.3900\n",
            "Epoch 9/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.3519 - loss: 1.4564 - val_accuracy: 0.3736 - val_loss: 1.3890\n",
            "Epoch 10/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3472 - loss: 1.4551 - val_accuracy: 0.3773 - val_loss: 1.3889\n",
            "Epoch 11/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.3612 - loss: 1.4525 - val_accuracy: 0.3723 - val_loss: 1.3900\n",
            "Epoch 12/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.3519 - loss: 1.4508 - val_accuracy: 0.3664 - val_loss: 1.3904\n",
            "Epoch 13/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.3587 - loss: 1.4431 - val_accuracy: 0.3773 - val_loss: 1.3912\n",
            "Epoch 14/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3553 - loss: 1.4447 - val_accuracy: 0.3764 - val_loss: 1.3926\n",
            "Epoch 15/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3539 - loss: 1.4422 - val_accuracy: 0.3714 - val_loss: 1.3918\n",
            "Epoch 16/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.3584 - loss: 1.4384 - val_accuracy: 0.3755 - val_loss: 1.3891\n",
            "Epoch 17/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.3537 - loss: 1.4433 - val_accuracy: 0.3695 - val_loss: 1.3917\n",
            "Epoch 18/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.3580 - loss: 1.4437 - val_accuracy: 0.3709 - val_loss: 1.3900\n",
            "Epoch 19/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.3646 - loss: 1.4398 - val_accuracy: 0.3741 - val_loss: 1.3898\n",
            "Epoch 20/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.3658 - loss: 1.4425 - val_accuracy: 0.3705 - val_loss: 1.3894\n",
            "Epoch 21/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3610 - loss: 1.4360 - val_accuracy: 0.3714 - val_loss: 1.3887\n",
            "Epoch 22/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.3717 - loss: 1.4305 - val_accuracy: 0.3736 - val_loss: 1.3887\n",
            "Epoch 23/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.3640 - loss: 1.4313 - val_accuracy: 0.3736 - val_loss: 1.3880\n",
            "Epoch 24/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.3623 - loss: 1.4334 - val_accuracy: 0.3718 - val_loss: 1.3902\n",
            "Epoch 25/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.3611 - loss: 1.4285 - val_accuracy: 0.3714 - val_loss: 1.3894\n",
            "Epoch 26/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.3619 - loss: 1.4250 - val_accuracy: 0.3718 - val_loss: 1.3897\n",
            "Epoch 27/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.3672 - loss: 1.4231 - val_accuracy: 0.3645 - val_loss: 1.3899\n",
            "Epoch 28/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - accuracy: 0.3662 - loss: 1.4264 - val_accuracy: 0.3673 - val_loss: 1.3885\n",
            "Epoch 29/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.3685 - loss: 1.4270 - val_accuracy: 0.3677 - val_loss: 1.3885\n",
            "Epoch 30/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.3681 - loss: 1.4321 - val_accuracy: 0.3655 - val_loss: 1.3886\n",
            "Epoch 31/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.3591 - loss: 1.4212 - val_accuracy: 0.3691 - val_loss: 1.3884\n",
            "Epoch 32/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3569 - loss: 1.4291 - val_accuracy: 0.3645 - val_loss: 1.3866\n",
            "Epoch 33/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3711 - loss: 1.4189 - val_accuracy: 0.3636 - val_loss: 1.3885\n",
            "Epoch 34/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - accuracy: 0.3738 - loss: 1.4222 - val_accuracy: 0.3595 - val_loss: 1.3898\n",
            "Epoch 35/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.3577 - loss: 1.4210 - val_accuracy: 0.3632 - val_loss: 1.3866\n",
            "Epoch 36/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3651 - loss: 1.4231 - val_accuracy: 0.3668 - val_loss: 1.3869\n",
            "Epoch 37/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.3676 - loss: 1.4216 - val_accuracy: 0.3618 - val_loss: 1.3881\n",
            "Epoch 38/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.3690 - loss: 1.4231 - val_accuracy: 0.3714 - val_loss: 1.3877\n",
            "Epoch 39/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3662 - loss: 1.4200 - val_accuracy: 0.3668 - val_loss: 1.3896\n",
            "Epoch 40/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3808 - loss: 1.4210 - val_accuracy: 0.3691 - val_loss: 1.3876\n",
            "Epoch 41/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.3697 - loss: 1.4160 - val_accuracy: 0.3627 - val_loss: 1.3898\n",
            "Epoch 42/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.3705 - loss: 1.4178 - val_accuracy: 0.3709 - val_loss: 1.3893\n",
            "Epoch 43/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3849 - loss: 1.4124 - val_accuracy: 0.3677 - val_loss: 1.3896\n",
            "Epoch 44/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3717 - loss: 1.4176 - val_accuracy: 0.3705 - val_loss: 1.3856\n",
            "Epoch 45/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3654 - loss: 1.4169 - val_accuracy: 0.3659 - val_loss: 1.3871\n",
            "Epoch 46/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.3750 - loss: 1.4130 - val_accuracy: 0.3714 - val_loss: 1.3843\n",
            "Epoch 47/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.3867 - loss: 1.4097 - val_accuracy: 0.3745 - val_loss: 1.3850\n",
            "Epoch 48/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.3685 - loss: 1.4157 - val_accuracy: 0.3686 - val_loss: 1.3847\n",
            "Epoch 49/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.3746 - loss: 1.4063 - val_accuracy: 0.3655 - val_loss: 1.3873\n",
            "Epoch 50/50\n",
            "\u001b[1m440/440\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.3748 - loss: 1.4068 - val_accuracy: 0.3695 - val_loss: 1.3863\n",
            "\n",
            "✅ Test Loss: 1.3863\n",
            "✅ Test Accuracy: 0.3695\n",
            "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\n",
            "\n",
            "📝 Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.41      0.41      0.41       199\n",
            "           1       0.39      0.34      0.36       370\n",
            "           2       0.38      0.34      0.35       482\n",
            "           3       0.35      0.45      0.39       464\n",
            "           4       0.37      0.48      0.42       329\n",
            "           5       0.00      0.00      0.00       113\n",
            "           6       0.00      0.00      0.00        25\n",
            "           7       0.35      0.97      0.51        78\n",
            "           8       0.00      0.00      0.00        77\n",
            "           9       0.00      0.00      0.00        63\n",
            "\n",
            "    accuracy                           0.37      2200\n",
            "   macro avg       0.22      0.30      0.25      2200\n",
            "weighted avg       0.33      0.37      0.34      2200\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import accuracy_score, log_loss\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Dropout, BatchNormalization\n",
        "\n",
        "# --------------------------\n",
        "# 🔧 Step 0: Custom Lion Optimizer\n",
        "# --------------------------\n",
        "class LionOptimizer(tf.keras.optimizers.Optimizer):\n",
        "    def __init__(\n",
        "        self,\n",
        "        learning_rate=0.001,\n",
        "        beta1=0.9,\n",
        "        beta2=0.99,\n",
        "        weight_decay=None,\n",
        "        clipnorm=None,\n",
        "        clipvalue=None,\n",
        "        global_clipnorm=None,\n",
        "        use_ema=False,\n",
        "        ema_momentum=0.99,\n",
        "        ema_overwrite_frequency=None,\n",
        "        name=\"lion\",\n",
        "        **kwargs\n",
        "    ):\n",
        "        super().__init__(\n",
        "            learning_rate=learning_rate,\n",
        "            weight_decay=weight_decay,\n",
        "            clipnorm=clipnorm,\n",
        "            clipvalue=clipvalue,\n",
        "            global_clipnorm=global_clipnorm,\n",
        "            use_ema=use_ema,\n",
        "            ema_momentum=ema_momentum,\n",
        "            ema_overwrite_frequency=ema_overwrite_frequency,\n",
        "            name=name,\n",
        "            **kwargs\n",
        "        )\n",
        "        self.beta1 = beta1\n",
        "        self.beta2 = beta2\n",
        "        # Dictionary to track variables and their momentums\n",
        "        self._momentum_dict = {}\n",
        "\n",
        "    def build(self, var_list):\n",
        "        \"\"\"Initialize optimizer variables.\"\"\"\n",
        "        super().build(var_list)\n",
        "        if hasattr(self, \"_built\") and self._built:\n",
        "            return\n",
        "\n",
        "        # Create momentum variables for each trainable variable\n",
        "        for i, var in enumerate(var_list):\n",
        "            var_key = self._var_key(var)\n",
        "            # Use a simple indexed name that avoids any problematic characters\n",
        "            momentum_name = f\"m_{i}\"\n",
        "            momentum = self.add_variable_from_reference(\n",
        "                reference_variable=var, name=momentum_name\n",
        "            )\n",
        "            self._momentum_dict[var_key] = momentum\n",
        "\n",
        "        self._built = True\n",
        "\n",
        "    def update_step(self, gradient, variable, learning_rate):\n",
        "        \"\"\"Update step given gradient and the associated model variable.\"\"\"\n",
        "        var_dtype = variable.dtype\n",
        "        lr = tf.cast(learning_rate, var_dtype)\n",
        "        beta1 = tf.cast(self.beta1, var_dtype)\n",
        "\n",
        "        var_key = self._var_key(variable)\n",
        "        momentum = self._momentum_dict[var_key]\n",
        "\n",
        "        # Update momentum\n",
        "        momentum_t = beta1 * momentum + (1 - beta1) * gradient\n",
        "\n",
        "        # Update variable using the sign of momentum\n",
        "        variable.assign_sub(lr * tf.sign(momentum_t))\n",
        "\n",
        "        # Store the updated momentum\n",
        "        momentum.assign(momentum_t)\n",
        "\n",
        "    def get_config(self):\n",
        "        config = super().get_config()\n",
        "        config.update({\n",
        "            \"beta1\": self.beta1,\n",
        "            \"beta2\": self.beta2,\n",
        "        })\n",
        "        return config\n",
        "\n",
        "# --------------------------\n",
        "# Step 1: Dataset\n",
        "# --------------------------\n",
        "X, y = make_classification(n_samples=20000, n_features=20, n_informative=15,\n",
        "                           n_redundant=5, n_classes=2, random_state=42)\n",
        "X = StandardScaler().fit_transform(X)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n",
        "\n",
        "# --------------------------\n",
        "# Step 2: Model\n",
        "# --------------------------\n",
        "model = Sequential([\n",
        "    tf.keras.Input(shape=(X_train.shape[1],)),\n",
        "    Dense(128, activation='relu'),\n",
        "    BatchNormalization(),\n",
        "    Dropout(0.3),\n",
        "    Dense(64, activation='relu'),\n",
        "    BatchNormalization(),\n",
        "    Dropout(0.3),\n",
        "    Dense(1, activation='sigmoid')\n",
        "])\n",
        "\n",
        "# --------------------------\n",
        "# Step 3: Compile with Custom Optimizer\n",
        "# --------------------------\n",
        "optimizer = LionOptimizer(learning_rate=0.001, beta1=0.9, beta2=0.99)\n",
        "model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# --------------------------\n",
        "# Step 4: Train\n",
        "# --------------------------\n",
        "history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test), verbose=2)\n",
        "\n",
        "# --------------------------\n",
        "# Step 5: Evaluate\n",
        "# --------------------------\n",
        "loss, accuracy = model.evaluate(X_test, y_test, verbose=0)\n",
        "print(f\"Final Accuracy: {accuracy:.4f}, Final Loss: {loss:.4f}\")\n",
        "\n",
        "# --------------------------\n",
        "# Step 6: Plot clean style like reference\n",
        "# --------------------------\n",
        "plt.figure(figsize=(10, 4))\n",
        "\n",
        "# Accuracy\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(history.history['val_accuracy'], color='black', linewidth=3)\n",
        "plt.title('accuracy', fontsize=16, weight='bold')\n",
        "plt.xticks([]); plt.yticks([])\n",
        "plt.gca().spines['top'].set_visible(False)\n",
        "\n",
        "plt.gca().spines['right'].set_visible(False)\n",
        "\n",
        "# Loss\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(history.history['val_loss'], color='black', linewidth=3)\n",
        "plt.title('loss', fontsize=16, weight='bold')\n",
        "plt.xticks([]); plt.yticks([])\n",
        "plt.gca().spines['top'].set_visible(False)\n",
        "plt.gca().spines['right'].set_visible(False)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "u_NNHUXFIiVB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "efa1755d-7621-4d41-98fc-2ce967f50921"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "469/469 - 4s - 8ms/step - accuracy: 0.9239 - loss: 0.1937 - val_accuracy: 0.9752 - val_loss: 0.0890\n",
            "Epoch 2/50\n",
            "469/469 - 2s - 5ms/step - accuracy: 0.9586 - loss: 0.1218 - val_accuracy: 0.9800 - val_loss: 0.0810\n",
            "Epoch 3/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9666 - loss: 0.1030 - val_accuracy: 0.9824 - val_loss: 0.0779\n",
            "Epoch 4/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9707 - loss: 0.0934 - val_accuracy: 0.9852 - val_loss: 0.0726\n",
            "Epoch 5/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9723 - loss: 0.0907 - val_accuracy: 0.9854 - val_loss: 0.0738\n",
            "Epoch 6/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9744 - loss: 0.0854 - val_accuracy: 0.9868 - val_loss: 0.0691\n",
            "Epoch 7/50\n",
            "469/469 - 3s - 7ms/step - accuracy: 0.9744 - loss: 0.0829 - val_accuracy: 0.9850 - val_loss: 0.0728\n",
            "Epoch 8/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9775 - loss: 0.0763 - val_accuracy: 0.9862 - val_loss: 0.0727\n",
            "Epoch 9/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9789 - loss: 0.0777 - val_accuracy: 0.9866 - val_loss: 0.0712\n",
            "Epoch 10/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9787 - loss: 0.0695 - val_accuracy: 0.9880 - val_loss: 0.0684\n",
            "Epoch 11/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9787 - loss: 0.0699 - val_accuracy: 0.9868 - val_loss: 0.0729\n",
            "Epoch 12/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9803 - loss: 0.0692 - val_accuracy: 0.9868 - val_loss: 0.0704\n",
            "Epoch 13/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9823 - loss: 0.0640 - val_accuracy: 0.9862 - val_loss: 0.0762\n",
            "Epoch 14/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9809 - loss: 0.0670 - val_accuracy: 0.9874 - val_loss: 0.0713\n",
            "Epoch 15/50\n",
            "469/469 - 3s - 7ms/step - accuracy: 0.9821 - loss: 0.0645 - val_accuracy: 0.9888 - val_loss: 0.0675\n",
            "Epoch 16/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9823 - loss: 0.0645 - val_accuracy: 0.9872 - val_loss: 0.0701\n",
            "Epoch 17/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9831 - loss: 0.0605 - val_accuracy: 0.9878 - val_loss: 0.0731\n",
            "Epoch 18/50\n",
            "469/469 - 3s - 5ms/step - accuracy: 0.9837 - loss: 0.0593 - val_accuracy: 0.9870 - val_loss: 0.0710\n",
            "Epoch 19/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9837 - loss: 0.0576 - val_accuracy: 0.9892 - val_loss: 0.0713\n",
            "Epoch 20/50\n",
            "469/469 - 2s - 5ms/step - accuracy: 0.9846 - loss: 0.0595 - val_accuracy: 0.9886 - val_loss: 0.0694\n",
            "Epoch 21/50\n",
            "469/469 - 2s - 4ms/step - accuracy: 0.9850 - loss: 0.0572 - val_accuracy: 0.9880 - val_loss: 0.0716\n",
            "Epoch 22/50\n",
            "469/469 - 2s - 5ms/step - accuracy: 0.9847 - loss: 0.0577 - val_accuracy: 0.9890 - val_loss: 0.0680\n",
            "Epoch 23/50\n",
            "469/469 - 2s - 5ms/step - accuracy: 0.9847 - loss: 0.0560 - val_accuracy: 0.9894 - val_loss: 0.0687\n",
            "Epoch 24/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9861 - loss: 0.0535 - val_accuracy: 0.9894 - val_loss: 0.0731\n",
            "Epoch 25/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9855 - loss: 0.0569 - val_accuracy: 0.9892 - val_loss: 0.0697\n",
            "Epoch 26/50\n",
            "469/469 - 2s - 5ms/step - accuracy: 0.9864 - loss: 0.0546 - val_accuracy: 0.9884 - val_loss: 0.0719\n",
            "Epoch 27/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9857 - loss: 0.0522 - val_accuracy: 0.9888 - val_loss: 0.0707\n",
            "Epoch 28/50\n",
            "469/469 - 2s - 4ms/step - accuracy: 0.9853 - loss: 0.0569 - val_accuracy: 0.9882 - val_loss: 0.0758\n",
            "Epoch 29/50\n",
            "469/469 - 2s - 4ms/step - accuracy: 0.9856 - loss: 0.0535 - val_accuracy: 0.9878 - val_loss: 0.0738\n",
            "Epoch 30/50\n",
            "469/469 - 3s - 5ms/step - accuracy: 0.9859 - loss: 0.0551 - val_accuracy: 0.9886 - val_loss: 0.0744\n",
            "Epoch 31/50\n",
            "469/469 - 3s - 5ms/step - accuracy: 0.9862 - loss: 0.0533 - val_accuracy: 0.9898 - val_loss: 0.0711\n",
            "Epoch 32/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9857 - loss: 0.0560 - val_accuracy: 0.9888 - val_loss: 0.0688\n",
            "Epoch 33/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9871 - loss: 0.0511 - val_accuracy: 0.9892 - val_loss: 0.0716\n",
            "Epoch 34/50\n",
            "469/469 - 2s - 4ms/step - accuracy: 0.9862 - loss: 0.0517 - val_accuracy: 0.9890 - val_loss: 0.0723\n",
            "Epoch 35/50\n",
            "469/469 - 2s - 5ms/step - accuracy: 0.9874 - loss: 0.0486 - val_accuracy: 0.9890 - val_loss: 0.0714\n",
            "Epoch 36/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9865 - loss: 0.0503 - val_accuracy: 0.9876 - val_loss: 0.0782\n",
            "Epoch 37/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9846 - loss: 0.0534 - val_accuracy: 0.9894 - val_loss: 0.0726\n",
            "Epoch 38/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9873 - loss: 0.0493 - val_accuracy: 0.9880 - val_loss: 0.0756\n",
            "Epoch 39/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9867 - loss: 0.0493 - val_accuracy: 0.9906 - val_loss: 0.0721\n",
            "Epoch 40/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9869 - loss: 0.0474 - val_accuracy: 0.9890 - val_loss: 0.0774\n",
            "Epoch 41/50\n",
            "469/469 - 3s - 5ms/step - accuracy: 0.9862 - loss: 0.0532 - val_accuracy: 0.9878 - val_loss: 0.0776\n",
            "Epoch 42/50\n",
            "469/469 - 2s - 4ms/step - accuracy: 0.9876 - loss: 0.0489 - val_accuracy: 0.9892 - val_loss: 0.0737\n",
            "Epoch 43/50\n",
            "469/469 - 2s - 4ms/step - accuracy: 0.9865 - loss: 0.0483 - val_accuracy: 0.9890 - val_loss: 0.0749\n",
            "Epoch 44/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9866 - loss: 0.0497 - val_accuracy: 0.9904 - val_loss: 0.0716\n",
            "Epoch 45/50\n",
            "469/469 - 2s - 5ms/step - accuracy: 0.9887 - loss: 0.0447 - val_accuracy: 0.9888 - val_loss: 0.0784\n",
            "Epoch 46/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9879 - loss: 0.0493 - val_accuracy: 0.9898 - val_loss: 0.0748\n",
            "Epoch 47/50\n",
            "469/469 - 1s - 3ms/step - accuracy: 0.9872 - loss: 0.0494 - val_accuracy: 0.9884 - val_loss: 0.0767\n",
            "Epoch 48/50\n",
            "469/469 - 2s - 5ms/step - accuracy: 0.9879 - loss: 0.0475 - val_accuracy: 0.9886 - val_loss: 0.0762\n",
            "Epoch 49/50\n",
            "469/469 - 2s - 5ms/step - accuracy: 0.9880 - loss: 0.0464 - val_accuracy: 0.9890 - val_loss: 0.0743\n",
            "Epoch 50/50\n",
            "469/469 - 2s - 4ms/step - accuracy: 0.9873 - loss: 0.0518 - val_accuracy: 0.9902 - val_loss: 0.0688\n",
            "Final Accuracy: 0.9902, Final Loss: 0.0688\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import accuracy_score, log_loss\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Dropout, BatchNormalization\n",
        "\n",
        "# --------------------------\n",
        "# 🔧 Step 0: Custom Lion Optimizer\n",
        "# --------------------------\n",
        "class LionOptimizer(tf.keras.optimizers.Optimizer):\n",
        "    def __init__(\n",
        "        self,\n",
        "        learning_rate=0.001,\n",
        "        beta1=0.9,\n",
        "        beta2=0.99,\n",
        "        weight_decay=None,\n",
        "        clipnorm=None,\n",
        "        clipvalue=None,\n",
        "        global_clipnorm=None,\n",
        "        use_ema=False,\n",
        "        ema_momentum=0.99,\n",
        "        ema_overwrite_frequency=None,\n",
        "        name=\"lion\",\n",
        "        **kwargs\n",
        "    ):\n",
        "        super().__init__(\n",
        "            learning_rate=learning_rate,\n",
        "            weight_decay=weight_decay,\n",
        "            clipnorm=clipnorm,\n",
        "            clipvalue=clipvalue,\n",
        "            global_clipnorm=global_clipnorm,\n",
        "            use_ema=use_ema,\n",
        "            ema_momentum=ema_momentum,\n",
        "            ema_overwrite_frequency=ema_overwrite_frequency,\n",
        "            name=name,\n",
        "            **kwargs\n",
        "        )\n",
        "        self.beta1 = beta1\n",
        "        self.beta2 = beta2\n",
        "        # Dictionary to track variables and their momentums\n",
        "        self._momentum_dict = {}\n",
        "\n",
        "    def build(self, var_list):\n",
        "        \"\"\"Initialize optimizer variables.\"\"\"\n",
        "        super().build(var_list)\n",
        "        if hasattr(self, \"_built\") and self._built:\n",
        "            return\n",
        "\n",
        "        # Create momentum variables for each trainable variable\n",
        "        for i, var in enumerate(var_list):\n",
        "            var_key = self._var_key(var)\n",
        "            # Use a simple indexed name that avoids any problematic characters\n",
        "            momentum_name = f\"m_{i}\"\n",
        "            momentum = self.add_variable_from_reference(\n",
        "                reference_variable=var, name=momentum_name\n",
        "            )\n",
        "            self._momentum_dict[var_key] = momentum\n",
        "\n",
        "        self._built = True\n",
        "\n",
        "    def update_step(self, gradient, variable, learning_rate):\n",
        "        \"\"\"Update step given gradient and the associated model variable.\"\"\"\n",
        "        var_dtype = variable.dtype\n",
        "        lr = tf.cast(learning_rate, var_dtype)\n",
        "        beta1 = tf.cast(self.beta1, var_dtype)\n",
        "\n",
        "        var_key = self._var_key(variable)\n",
        "        momentum = self._momentum_dict[var_key]\n",
        "\n",
        "        # Update momentum\n",
        "        momentum_t = beta1 * momentum + (1 - beta1) * gradient\n",
        "\n",
        "        # Update variable using the sign of momentum\n",
        "        variable.assign_sub(lr * tf.sign(momentum_t))\n",
        "\n",
        "        # Store the updated momentum\n",
        "        momentum.assign(momentum_t)\n",
        "\n",
        "    def get_config(self):\n",
        "        config = super().get_config()\n",
        "        config.update({\n",
        "            \"beta1\": self.beta1,\n",
        "            \"beta2\": self.beta2,\n",
        "        })\n",
        "        return config\n",
        "\n",
        "# --------------------------\n",
        "# Step 1: Dataset with fixed random state\n",
        "# --------------------------\n",
        "X, y = make_classification(n_samples=20000, n_features=20, n_informative=15,\n",
        "                           n_redundant=5, n_classes=2, random_state=42)\n",
        "X = StandardScaler().fit_transform(X)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n",
        "\n",
        "# --------------------------\n",
        "# Step 2: Model with deterministic initialization\n",
        "# --------------------------\n",
        "# Set kernel initializers with fixed seeds for deterministic weight initialization\n",
        "kernel_initializer = tf.keras.initializers.GlorotUniform(seed=42)\n",
        "bias_initializer = tf.keras.initializers.Zeros()\n",
        "\n",
        "model = Sequential([\n",
        "    tf.keras.Input(shape=(X_train.shape[1],)),\n",
        "    Dense(128, activation='relu', kernel_initializer=kernel_initializer, bias_initializer=bias_initializer),\n",
        "    BatchNormalization(momentum=0.99, epsilon=0.001),\n",
        "    Dropout(0.3, seed=42),\n",
        "    Dense(64, activation='relu', kernel_initializer=kernel_initializer, bias_initializer=bias_initializer),\n",
        "    BatchNormalization(momentum=0.99, epsilon=0.001),\n",
        "    Dropout(0.3, seed=42),\n",
        "    Dense(1, activation='sigmoid', kernel_initializer=kernel_initializer, bias_initializer=bias_initializer)\n",
        "])\n",
        "\n",
        "# --------------------------\n",
        "# Step 3: Compile with Custom Optimizer\n",
        "# --------------------------\n",
        "optimizer = LionOptimizer(learning_rate=0.001, beta1=0.9, beta2=0.99)\n",
        "model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# --------------------------\n",
        "# Step 4: Train with deterministic operations\n",
        "# --------------------------\n",
        "# Use deterministic operations where possible\n",
        "tf.config.experimental.enable_op_determinism()\n",
        "\n",
        "# Set global random seed for TensorFlow\n",
        "tf.random.set_seed(42)  # Or any other fixed seed\n",
        "\n",
        "# Configure a fixed shuffle seed for training\n",
        "shuffle_seed = 42\n",
        "history = model.fit(\n",
        "    X_train, y_train,\n",
        "    epochs=50,\n",
        "    batch_size=32,\n",
        "    validation_data=(X_test, y_test),\n",
        "    verbose=2,\n",
        "    shuffle=True,  # Still shuffle but with a fixed seed\n",
        "    callbacks=[\n",
        "        # Custom callback to set the shuffle seed for each epoch\n",
        "        tf.keras.callbacks.LambdaCallback(\n",
        "            on_epoch_begin=lambda epoch, logs: tf.random.set_seed(shuffle_seed + epoch)\n",
        "        )\n",
        "    ]\n",
        ")\n",
        "\n",
        "# --------------------------\n",
        "# Step 5: Evaluate\n",
        "# --------------------------\n",
        "loss, accuracy = model.evaluate(X_test, y_test, verbose=0)\n",
        "print(f\"Final Accuracy: {accuracy:.4f}, Final Loss: {loss:.4f}\")\n",
        "\n",
        "# --------------------------\n",
        "# Step 6: Plot clean style like reference\n",
        "# --------------------------\n",
        "plt.figure(figsize=(10, 4))\n",
        "\n",
        "# Accuracy\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(history.history['val_accuracy'], color='black', linewidth=3)\n",
        "plt.title('accuracy', fontsize=16, weight='bold')\n",
        "plt.xticks([]); plt.yticks([])\n",
        "plt.gca().spines['top'].set_visible(False)\n",
        "plt.gca().spines['right'].set_visible(False)\n",
        "\n",
        "# Loss\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(history.history['val_loss'], color='black', linewidth=3)\n",
        "plt.title('loss', fontsize=16, weight='bold')\n",
        "plt.xticks([]); plt.yticks([])\n",
        "plt.gca().spines['top'].set_visible(False)\n",
        "plt.gca().spines['right'].set_visible(False)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.savefig('deterministic_results.png', dpi=300)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "EYdotmbNrS37",
        "outputId": "94ba3344-dc8f-4477-c123-0d24a3d22ab1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "469/469 - 6s - 13ms/step - accuracy: 0.9235 - loss: 0.1970 - val_accuracy: 0.9726 - val_loss: 0.0984\n",
            "Epoch 2/50\n",
            "469/469 - 4s - 8ms/step - accuracy: 0.9591 - loss: 0.1199 - val_accuracy: 0.9774 - val_loss: 0.0872\n",
            "Epoch 3/50\n",
            "469/469 - 4s - 8ms/step - accuracy: 0.9661 - loss: 0.1063 - val_accuracy: 0.9792 - val_loss: 0.0824\n",
            "Epoch 4/50\n",
            "469/469 - 5s - 10ms/step - accuracy: 0.9684 - loss: 0.0982 - val_accuracy: 0.9814 - val_loss: 0.0774\n",
            "Epoch 5/50\n",
            "469/469 - 3s - 7ms/step - accuracy: 0.9730 - loss: 0.0890 - val_accuracy: 0.9844 - val_loss: 0.0738\n",
            "Epoch 6/50\n",
            "469/469 - 3s - 6ms/step - accuracy: 0.9749 - loss: 0.0834 - val_accuracy: 0.9818 - val_loss: 0.0794\n",
            "Epoch 7/50\n",
            "469/469 - 3s - 7ms/step - accuracy: 0.9756 - loss: 0.0819 - val_accuracy: 0.9824 - val_loss: 0.0824\n",
            "Epoch 8/50\n",
            "469/469 - 2s - 4ms/step - accuracy: 0.9757 - loss: 0.0813 - val_accuracy: 0.9812 - val_loss: 0.0832\n",
            "Epoch 9/50\n",
            "469/469 - 2s - 4ms/step - accuracy: 0.9775 - loss: 0.0751 - val_accuracy: 0.9864 - val_loss: 0.0756\n",
            "Epoch 10/50\n",
            "469/469 - 4s - 8ms/step - accuracy: 0.9771 - loss: 0.0749 - val_accuracy: 0.9852 - val_loss: 0.0765\n",
            "Epoch 11/50\n",
            "469/469 - 3s - 7ms/step - accuracy: 0.9799 - loss: 0.0721 - val_accuracy: 0.9832 - val_loss: 0.0798\n",
            "Epoch 12/50\n",
            "469/469 - 5s - 11ms/step - accuracy: 0.9808 - loss: 0.0695 - val_accuracy: 0.9870 - val_loss: 0.0761\n",
            "Epoch 13/50\n",
            "469/469 - 4s - 9ms/step - accuracy: 0.9793 - loss: 0.0708 - val_accuracy: 0.9878 - val_loss: 0.0701\n",
            "Epoch 14/50\n",
            "469/469 - 3s - 6ms/step - accuracy: 0.9822 - loss: 0.0653 - val_accuracy: 0.9874 - val_loss: 0.0772\n",
            "Epoch 15/50\n",
            "469/469 - 2s - 4ms/step - accuracy: 0.9824 - loss: 0.0647 - val_accuracy: 0.9872 - val_loss: 0.0743\n",
            "Epoch 16/50\n",
            "469/469 - 3s - 6ms/step - accuracy: 0.9796 - loss: 0.0671 - val_accuracy: 0.9858 - val_loss: 0.0740\n",
            "Epoch 17/50\n",
            "469/469 - 3s - 6ms/step - accuracy: 0.9831 - loss: 0.0619 - val_accuracy: 0.9878 - val_loss: 0.0718\n",
            "Epoch 18/50\n",
            "469/469 - 3s - 7ms/step - accuracy: 0.9823 - loss: 0.0609 - val_accuracy: 0.9864 - val_loss: 0.0753\n",
            "Epoch 19/50\n",
            "469/469 - 2s - 5ms/step - accuracy: 0.9844 - loss: 0.0591 - val_accuracy: 0.9878 - val_loss: 0.0747\n",
            "Epoch 20/50\n",
            "469/469 - 2s - 4ms/step - accuracy: 0.9837 - loss: 0.0617 - val_accuracy: 0.9878 - val_loss: 0.0747\n",
            "Epoch 21/50\n",
            "469/469 - 3s - 6ms/step - accuracy: 0.9832 - loss: 0.0586 - val_accuracy: 0.9870 - val_loss: 0.0770\n",
            "Epoch 22/50\n",
            "469/469 - 3s - 6ms/step - accuracy: 0.9830 - loss: 0.0615 - val_accuracy: 0.9874 - val_loss: 0.0726\n",
            "Epoch 23/50\n",
            "469/469 - 3s - 7ms/step - accuracy: 0.9827 - loss: 0.0586 - val_accuracy: 0.9868 - val_loss: 0.0784\n",
            "Epoch 24/50\n",
            "469/469 - 2s - 5ms/step - accuracy: 0.9842 - loss: 0.0588 - val_accuracy: 0.9886 - val_loss: 0.0719\n",
            "Epoch 25/50\n",
            "469/469 - 3s - 6ms/step - accuracy: 0.9861 - loss: 0.0552 - val_accuracy: 0.9872 - val_loss: 0.0722\n",
            "Epoch 26/50\n",
            "469/469 - 3s - 6ms/step - accuracy: 0.9848 - loss: 0.0573 - val_accuracy: 0.9882 - val_loss: 0.0749\n",
            "Epoch 27/50\n",
            "469/469 - 3s - 6ms/step - accuracy: 0.9841 - loss: 0.0582 - val_accuracy: 0.9882 - val_loss: 0.0742\n",
            "Epoch 28/50\n",
            "469/469 - 3s - 7ms/step - accuracy: 0.9853 - loss: 0.0535 - val_accuracy: 0.9870 - val_loss: 0.0801\n",
            "Epoch 29/50\n",
            "469/469 - 2s - 4ms/step - accuracy: 0.9841 - loss: 0.0590 - val_accuracy: 0.9888 - val_loss: 0.0701\n",
            "Epoch 30/50\n",
            "469/469 - 3s - 6ms/step - accuracy: 0.9821 - loss: 0.0599 - val_accuracy: 0.9862 - val_loss: 0.0744\n",
            "Epoch 31/50\n",
            "469/469 - 3s - 6ms/step - accuracy: 0.9858 - loss: 0.0531 - val_accuracy: 0.9870 - val_loss: 0.0776\n",
            "Epoch 32/50\n",
            "469/469 - 3s - 7ms/step - accuracy: 0.9847 - loss: 0.0550 - val_accuracy: 0.9884 - val_loss: 0.0734\n",
            "Epoch 33/50\n",
            "469/469 - 2s - 5ms/step - accuracy: 0.9855 - loss: 0.0532 - val_accuracy: 0.9860 - val_loss: 0.0791\n",
            "Epoch 34/50\n",
            "469/469 - 2s - 4ms/step - accuracy: 0.9881 - loss: 0.0522 - val_accuracy: 0.9872 - val_loss: 0.0779\n",
            "Epoch 35/50\n",
            "469/469 - 2s - 4ms/step - accuracy: 0.9854 - loss: 0.0564 - val_accuracy: 0.9894 - val_loss: 0.0723\n",
            "Epoch 36/50\n",
            "469/469 - 3s - 6ms/step - accuracy: 0.9867 - loss: 0.0516 - val_accuracy: 0.9870 - val_loss: 0.0797\n",
            "Epoch 37/50\n",
            "469/469 - 3s - 7ms/step - accuracy: 0.9862 - loss: 0.0529 - val_accuracy: 0.9884 - val_loss: 0.0753\n",
            "Epoch 38/50\n",
            "469/469 - 2s - 5ms/step - accuracy: 0.9865 - loss: 0.0521 - val_accuracy: 0.9878 - val_loss: 0.0794\n",
            "Epoch 39/50\n",
            "469/469 - 3s - 6ms/step - accuracy: 0.9859 - loss: 0.0547 - val_accuracy: 0.9892 - val_loss: 0.0762\n",
            "Epoch 40/50\n",
            "469/469 - 2s - 4ms/step - accuracy: 0.9870 - loss: 0.0528 - val_accuracy: 0.9884 - val_loss: 0.0771\n",
            "Epoch 41/50\n",
            "469/469 - 3s - 6ms/step - accuracy: 0.9871 - loss: 0.0499 - val_accuracy: 0.9886 - val_loss: 0.0778\n",
            "Epoch 42/50\n",
            "469/469 - 3s - 7ms/step - accuracy: 0.9871 - loss: 0.0524 - val_accuracy: 0.9874 - val_loss: 0.0778\n",
            "Epoch 43/50\n",
            "469/469 - 2s - 4ms/step - accuracy: 0.9868 - loss: 0.0479 - val_accuracy: 0.9876 - val_loss: 0.0833\n",
            "Epoch 44/50\n",
            "469/469 - 3s - 6ms/step - accuracy: 0.9881 - loss: 0.0474 - val_accuracy: 0.9880 - val_loss: 0.0839\n",
            "Epoch 45/50\n",
            "469/469 - 3s - 6ms/step - accuracy: 0.9867 - loss: 0.0485 - val_accuracy: 0.9884 - val_loss: 0.0830\n",
            "Epoch 46/50\n",
            "469/469 - 3s - 6ms/step - accuracy: 0.9880 - loss: 0.0488 - val_accuracy: 0.9878 - val_loss: 0.0818\n",
            "Epoch 47/50\n",
            "469/469 - 3s - 7ms/step - accuracy: 0.9871 - loss: 0.0509 - val_accuracy: 0.9886 - val_loss: 0.0823\n",
            "Epoch 48/50\n",
            "469/469 - 2s - 5ms/step - accuracy: 0.9865 - loss: 0.0481 - val_accuracy: 0.9884 - val_loss: 0.0852\n",
            "Epoch 49/50\n",
            "469/469 - 3s - 6ms/step - accuracy: 0.9880 - loss: 0.0501 - val_accuracy: 0.9882 - val_loss: 0.0833\n",
            "Epoch 50/50\n",
            "469/469 - 2s - 4ms/step - accuracy: 0.9881 - loss: 0.0471 - val_accuracy: 0.9896 - val_loss: 0.0828\n",
            "Final Accuracy: 0.9896, Final Loss: 0.0828\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}